var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from 'react';
import { Property } from './property';
import { useNotionContext } from '../context';
import { CollectionGroup } from './collection-group';
import { getCollectionGroups } from '../utils';
export var CollectionViewList = function (_a) {
    var _b;
    var collection = _a.collection, collectionView = _a.collectionView, collectionData = _a.collectionData;
    var isGroupedCollection = (_b = collectionView === null || collectionView === void 0 ? void 0 : collectionView.format) === null || _b === void 0 ? void 0 : _b.collection_group_by;
    if (isGroupedCollection) {
        var collectionGroups = getCollectionGroups(collection, collectionView, collectionData);
        return collectionGroups.map(function (group, key) { return (React.createElement(CollectionGroup, __assign({ key: key }, group, { collectionViewComponent: List }))); });
    }
    return (React.createElement(List, { blockIds: collectionData['collection_group_results'].blockIds, collection: collection, collectionView: collectionView }));
};
function List(_a) {
    var blockIds = _a.blockIds, collection = _a.collection, collectionView = _a.collectionView;
    var _b = useNotionContext(), components = _b.components, recordMap = _b.recordMap, mapPageUrl = _b.mapPageUrl;
    return (React.createElement("div", { className: 'notion-list-collection' },
        React.createElement("div", { className: 'notion-list-view' },
            React.createElement("div", { className: 'notion-list-body' }, blockIds.map(function (blockId) {
                var _a, _b, _c, _d;
                var block = (_a = recordMap.block[blockId]) === null || _a === void 0 ? void 0 : _a.value;
                if (!block)
                    return null;
                var titleSchema = collection.schema.title;
                var titleData = (_b = block === null || block === void 0 ? void 0 : block.properties) === null || _b === void 0 ? void 0 : _b.title;
                return (React.createElement(components.pageLink, { className: 'notion-list-item notion-page-link', href: mapPageUrl(block.id), key: blockId },
                    React.createElement("div", { className: 'notion-list-item-title' },
                        React.createElement(Property, { schema: titleSchema, data: titleData, block: block, collection: collection })),
                    React.createElement("div", { className: 'notion-list-item-body' }, (_d = (_c = collectionView.format) === null || _c === void 0 ? void 0 : _c.list_properties) === null || _d === void 0 ? void 0 : _d.filter(function (p) { return p.visible; }).map(function (p) {
                        var _a;
                        var schema = collection.schema[p.property];
                        var data = block && ((_a = block.properties) === null || _a === void 0 ? void 0 : _a[p.property]);
                        if (!schema) {
                            return null;
                        }
                        return (React.createElement("div", { className: 'notion-list-item-property', key: p.property },
                            React.createElement(Property, { schema: schema, data: data, block: block, collection: collection })));
                    }))));
            })))));
}
//# sourceMappingURL=collection-view-list.js.map