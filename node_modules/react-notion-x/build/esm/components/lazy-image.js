var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { LazyImageFull, ImageState } from 'react-lazy-images';
import { useNotionContext } from '../context';
import { cs } from '../utils';
/**
 * Progressive, lazy images modeled after Medium's LQIP technique.
 */
export var LazyImage = function (_a) {
    var _b;
    var src = _a.src, alt = _a.alt, className = _a.className, style = _a.style, _c = _a.zoomable, zoomable = _c === void 0 ? false : _c, _d = _a.priority, priority = _d === void 0 ? false : _d, height = _a.height, rest = __rest(_a, ["src", "alt", "className", "style", "zoomable", "priority", "height"]);
    var _e = useNotionContext(), recordMap = _e.recordMap, zoom = _e.zoom, previewImages = _e.previewImages, forceCustomImages = _e.forceCustomImages, components = _e.components;
    var zoomRef = React.useRef(zoom ? zoom.clone() : null);
    var previewImage = previewImages ? (_b = recordMap === null || recordMap === void 0 ? void 0 : recordMap.preview_images) === null || _b === void 0 ? void 0 : _b[src] : null;
    var onLoad = React.useCallback(function (e) {
        if (zoomable && (e.target.src || e.target.srcset)) {
            if (zoomRef.current) {
                ;
                zoomRef.current.attach(e.target);
            }
        }
    }, [zoomRef, zoomable]);
    var attachZoom = React.useCallback(function (image) {
        if (zoomRef.current && image) {
            ;
            zoomRef.current.attach(image);
        }
    }, [zoomRef]);
    var attachZoomRef = React.useMemo(function () { return (zoomable ? attachZoom : undefined); }, [zoomable, attachZoom]);
    if (previewImage) {
        var aspectRatio_1 = previewImage.originalHeight / previewImage.originalWidth;
        if (components.image) {
            // TODO: could try using next/image onLoadComplete to replace LazyImageFull
            // while retaining our blur implementation
            return (React.createElement(components.image, { src: src, alt: alt, style: style, className: className, width: previewImage.originalWidth, height: previewImage.originalHeight, blurDataURL: previewImage.dataURIBase64, placeholder: 'blur', priority: priority, onLoad: onLoad }));
        }
        return (React.createElement(LazyImageFull, __assign({ src: src }, rest, { experimentalDecode: true }), function (_a) {
            var imageState = _a.imageState, ref = _a.ref;
            var isLoaded = imageState === ImageState.LoadSuccess;
            var wrapperStyle = {
                width: '100%'
            };
            var imgStyle = {};
            if (height) {
                wrapperStyle.height = height;
            }
            else {
                imgStyle.position = 'absolute';
                wrapperStyle.paddingBottom = aspectRatio_1 * 100 + "%";
            }
            return (React.createElement("div", { className: cs('lazy-image-wrapper', isLoaded && 'lazy-image-loaded', className), style: wrapperStyle },
                React.createElement("img", { className: 'lazy-image-preview', src: previewImage.dataURIBase64, alt: alt, ref: ref, style: style, decoding: 'async' }),
                React.createElement("img", { className: 'lazy-image-real', src: src, alt: alt, ref: attachZoomRef, style: __assign(__assign({}, style), imgStyle), width: previewImage.originalWidth, height: previewImage.originalHeight, decoding: 'async', loading: 'lazy' })));
        }));
    }
    else {
        // TODO: GracefulImage doesn't seem to support refs, but we'd like to prevent
        // invalid images from loading as error states
        /*
          NOTE: Using next/image without a pre-defined width/height is a huge pain in
          the ass. If we have a preview image, then this works fine since we know the
          dimensions ahead of time, but if we don't, then next/image won't display
          anything.
          
          Since next/image is the most common use case for using custom images, and this
          is likely to trip people up, we're disabling non-preview custom images for now.
    
          If you have a use case that is affected by this, please open an issue on github.
        */
        if (components.image && forceCustomImages) {
            return (React.createElement(components.image, { src: src, alt: alt, className: className, style: style, width: null, height: height || null, priority: priority, onLoad: onLoad }));
        }
        // Default image element
        return (React.createElement("img", __assign({ className: className, style: style, src: src, alt: alt, ref: attachZoomRef, loading: 'lazy', decoding: 'async' }, rest)));
    }
};
//# sourceMappingURL=lazy-image.js.map