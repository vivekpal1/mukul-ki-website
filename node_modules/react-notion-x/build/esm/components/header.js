var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { useHotkeys } from 'react-hotkeys-hook';
import { getPageBreadcrumbs } from 'notion-utils';
import { useNotionContext } from '../context';
import { PageIcon } from './page-icon';
import { SearchIcon } from '../icons/search-icon';
import { cs } from '../utils';
import { SearchDialog } from './search-dialog';
export var Header = function (_a) {
    var CustomHeader = _a.header;
    var _b = useNotionContext(), components = _b.components, recordMap = _b.recordMap, rootPageId = _b.rootPageId, mapPageUrl = _b.mapPageUrl, searchNotion = _b.searchNotion, restOfContext = __rest(_b, ["components", "recordMap", "rootPageId", "mapPageUrl", "searchNotion"]);
    var blockMap = recordMap.block;
    var blockIds = Object.keys(blockMap);
    var activePageId = blockIds[0];
    var hasSearch = !!searchNotion;
    var breadcrumbs = getPageBreadcrumbs(recordMap, activePageId);
    var _c = React.useState(false), isSearchOpen = _c[0], setIsSearchOpen = _c[1];
    var onOpenSearch = React.useCallback(function () {
        setIsSearchOpen(true);
    }, []);
    var onCloseSearch = React.useCallback(function () {
        setIsSearchOpen(false);
    }, []);
    useHotkeys('cmd+p', function (event) {
        onOpenSearch();
        event.preventDefault();
        event.stopPropagation();
    });
    useHotkeys('cmd+k', function (event) {
        onOpenSearch();
        event.preventDefault();
        event.stopPropagation();
    });
    if (!activePageId) {
        return null;
    }
    var headerComponents = [
        React.createElement("div", { className: 'breadcrumbs', key: 'breadcrumbs' }, breadcrumbs.map(function (breadcrumb, index) {
            var pageLinkProps = {};
            var componentMap = {
                pageLink: components.pageLink
            };
            if (breadcrumb.active) {
                componentMap.pageLink = function (props) { return React.createElement("div", __assign({}, props)); };
            }
            else {
                pageLinkProps.href = mapPageUrl(breadcrumb.pageId);
            }
            return (React.createElement(React.Fragment, { key: breadcrumb.pageId },
                React.createElement(componentMap.pageLink, __assign({ className: cs('breadcrumb', breadcrumb.active && 'active') }, pageLinkProps),
                    breadcrumb.icon && (React.createElement(PageIcon, { className: 'icon', block: breadcrumb.block })),
                    breadcrumb.title && (React.createElement("span", { className: 'title' }, breadcrumb.title))),
                index < breadcrumbs.length - 1 && (React.createElement("span", { className: 'spacer' }, "/"))));
        })),
        React.createElement("div", { className: 'rhs', key: 'rhs' }, hasSearch && (React.createElement("div", { role: 'button', className: cs('breadcrumb', 'button', 'notion-search-button'), onClick: onOpenSearch },
            React.createElement(SearchIcon, { className: 'searchIcon' }),
            React.createElement("span", { className: 'title' }, "Search")))),
        React.createElement(React.Fragment, { key: 'search' }, isSearchOpen && hasSearch && (React.createElement(SearchDialog, { isOpen: isSearchOpen, rootBlockId: rootPageId || activePageId, onClose: onCloseSearch, searchNotion: searchNotion })))
    ];
    if (CustomHeader) {
        return (React.createElement(CustomHeader, __assign({ activePageId: activePageId, blockIds: blockIds, blockMap: blockMap, breadcrumbs: breadcrumbs, className: 'notion-header', components: components, hasSearch: hasSearch, headerComponents: headerComponents, isSearchOpen: isSearchOpen, mapPageUrl: mapPageUrl, onCloseSearch: onCloseSearch, onOpenSearch: onOpenSearch, recordMap: recordMap, rootPageId: rootPageId, searchNotion: searchNotion, setIsSearchOpen: setIsSearchOpen }, restOfContext)));
    }
    return (React.createElement("header", { className: 'notion-header' },
        React.createElement("div", { className: 'nav-header' },
            headerComponents[0],
            headerComponents[1]),
        headerComponents[2]));
};
//# sourceMappingURL=header.js.map