var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from 'react';
import { cs, getCollectionGroups } from '../utils';
import { useNotionContext } from '../context';
import { CollectionCard } from './collection-card';
import { CollectionGroup } from './collection-group';
export var CollectionViewGallery = function (_a) {
    var _b;
    var collection = _a.collection, collectionView = _a.collectionView, collectionData = _a.collectionData;
    var isGroupedCollection = (_b = collectionView === null || collectionView === void 0 ? void 0 : collectionView.format) === null || _b === void 0 ? void 0 : _b.collection_group_by;
    if (isGroupedCollection) {
        var collectionGroups = getCollectionGroups(collection, collectionView, collectionData);
        return collectionGroups.map(function (group, index) { return (React.createElement(CollectionGroup, __assign({ key: index }, group, { collectionViewComponent: Gallery }))); });
    }
    return (React.createElement(Gallery, { collectionView: collectionView, collection: collection, blockIds: collectionData['collection_group_results'].blockIds }));
};
function Gallery(_a) {
    var blockIds = _a.blockIds, collectionView = _a.collectionView, collection = _a.collection;
    var recordMap = useNotionContext().recordMap;
    var _b = collectionView.format || {}, _c = _b.gallery_cover, gallery_cover = _c === void 0 ? { type: 'none' } : _c, _d = _b.gallery_cover_size, gallery_cover_size = _d === void 0 ? 'medium' : _d, _e = _b.gallery_cover_aspect, gallery_cover_aspect = _e === void 0 ? 'cover' : _e;
    return (React.createElement("div", { className: 'notion-gallery' },
        React.createElement("div", { className: 'notion-gallery-view' },
            React.createElement("div", { className: cs('notion-gallery-grid', "notion-gallery-grid-size-" + gallery_cover_size) }, blockIds.map(function (blockId) {
                var _a, _b;
                var block = (_a = recordMap.block[blockId]) === null || _a === void 0 ? void 0 : _a.value;
                if (!block)
                    return null;
                return (React.createElement(CollectionCard, { collection: collection, block: block, cover: gallery_cover, coverSize: gallery_cover_size, coverAspect: gallery_cover_aspect, properties: (_b = collectionView.format) === null || _b === void 0 ? void 0 : _b.gallery_properties, key: blockId }));
            })))));
}
//# sourceMappingURL=collection-view-gallery.js.map