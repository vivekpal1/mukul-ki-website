"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.CollectionViewBoard = void 0;
var react_1 = __importDefault(require("react"));
var collection_card_1 = require("./collection-card");
var collection_group_1 = require("./collection-group");
var utils_1 = require("../utils");
var empty_icon_1 = require("../icons/empty-icon");
var property_1 = require("./property");
var context_1 = require("../context");
var CollectionViewBoard = function (_a) {
    var _b;
    var collection = _a.collection, collectionView = _a.collectionView, collectionData = _a.collectionData, padding = _a.padding;
    var isGroupedCollection = (_b = collectionView === null || collectionView === void 0 ? void 0 : collectionView.format) === null || _b === void 0 ? void 0 : _b.collection_group_by;
    if (isGroupedCollection) {
        var collectionGroups = (0, utils_1.getCollectionGroups)(collection, collectionView, collectionData, padding);
        return collectionGroups.map(function (group, index) { return (react_1["default"].createElement(collection_group_1.CollectionGroup, __assign({ key: index }, group, { summaryProps: {
                style: {
                    paddingLeft: padding
                }
            }, collectionViewComponent: function (props) { return (react_1["default"].createElement(Board, __assign({ padding: padding }, props))); } }))); });
    }
    return (react_1["default"].createElement(Board, { padding: padding, collectionView: collectionView, collection: collection, collectionData: collectionData }));
};
exports.CollectionViewBoard = CollectionViewBoard;
function Board(_a) {
    var _b, _c;
    var collectionView = _a.collectionView, collectionData = _a.collectionData, collection = _a.collection, padding = _a.padding;
    var recordMap = (0, context_1.useNotionContext)().recordMap;
    var _d = (collectionView === null || collectionView === void 0 ? void 0 : collectionView.format) || {}, _e = _d.board_cover, board_cover = _e === void 0 ? { type: 'none' } : _e, _f = _d.board_cover_size, board_cover_size = _f === void 0 ? 'medium' : _f, _g = _d.board_cover_aspect, board_cover_aspect = _g === void 0 ? 'cover' : _g;
    var boardGroups = ((_b = collectionView === null || collectionView === void 0 ? void 0 : collectionView.format) === null || _b === void 0 ? void 0 : _b.board_columns) ||
        ((_c = collectionView === null || collectionView === void 0 ? void 0 : collectionView.format) === null || _c === void 0 ? void 0 : _c.board_groups2) ||
        [];
    return (react_1["default"].createElement("div", { className: 'notion-board' },
        react_1["default"].createElement("div", { className: (0, utils_1.cs)('notion-board-view', "notion-board-view-size-" + board_cover_size), style: {
                paddingLeft: padding
            } },
            react_1["default"].createElement("div", { className: 'notion-board-header' },
                react_1["default"].createElement("div", { className: 'notion-board-header-inner' }, boardGroups.map(function (p, index) {
                    var _a, _b, _c;
                    if (!((_a = collectionData.board_columns) === null || _a === void 0 ? void 0 : _a.results)) {
                        //no groupResults in the data when collection is in a toggle
                        return null;
                    }
                    var group = collectionData.board_columns.results[index];
                    var schema = collection.schema[p.property];
                    if (!group || !schema || p.hidden) {
                        return null;
                    }
                    return (react_1["default"].createElement("div", { className: 'notion-board-th', key: index },
                        react_1["default"].createElement("div", { className: 'notion-board-th-body' },
                            ((_b = group.value) === null || _b === void 0 ? void 0 : _b.value) ? (react_1["default"].createElement(property_1.Property, { schema: schema, data: [[(_c = group.value) === null || _c === void 0 ? void 0 : _c.value]], collection: collection })) : (react_1["default"].createElement("span", null,
                                react_1["default"].createElement(empty_icon_1.EmptyIcon, { className: 'notion-board-th-empty' }),
                                " No Select")),
                            react_1["default"].createElement("span", { className: 'notion-board-th-count' }, group.total))));
                }))),
            react_1["default"].createElement("div", { className: 'notion-board-header-placeholder' }),
            react_1["default"].createElement("div", { className: 'notion-board-body' }, boardGroups.map(function (p, index) {
                var _a, _b;
                if (!((_a = collectionData.board_columns) === null || _a === void 0 ? void 0 : _a.results)) {
                    return null;
                }
                var schema = collection.schema[p.property];
                var group = collectionData["results:select:" + (((_b = p === null || p === void 0 ? void 0 : p.value) === null || _b === void 0 ? void 0 : _b.value) || 'uncategorized')];
                if (!group || !schema || p.hidden) {
                    return null;
                }
                return (react_1["default"].createElement("div", { className: 'notion-board-group', key: index }, group.blockIds.map(function (blockId) {
                    var _a, _b;
                    var block = (_a = recordMap.block[blockId]) === null || _a === void 0 ? void 0 : _a.value;
                    if (!block)
                        return null;
                    return (react_1["default"].createElement(collection_card_1.CollectionCard, { className: 'notion-board-group-card', collection: collection, block: block, cover: board_cover, coverSize: board_cover_size, coverAspect: board_cover_aspect, properties: (_b = collectionView.format) === null || _b === void 0 ? void 0 : _b.board_properties, key: blockId }));
                })));
            })))));
}
//# sourceMappingURL=collection-view-board.js.map